// Generated by CoffeeScript 1.6.3
/* NO FLUSH*/

/* not in use*/

var EventEmitter, Mocha, emitter,
  __slice = [].slice;

EventEmitter = require('events').EventEmitter;

module.exports = emitter = new EventEmitter;

Mocha = require('mocha');

module.exports.create = function(opts) {
  var api, mocha;
  mocha = new Mocha({
    reporter: function(runner) {
      /*
      
         from: mocha/lib/runner.js
      
         Events:
         
           - `start`  execution started
           - `end`  execution complete
           - `suite`  (suite) test suite execution started
           - `suite end`  (suite) all tests (and sub-suites) have finished
           - `test`  (test) test execution started
           - `test end`  (test) test completed
           - `hook`  (hook) hook execution started
           - `hook end`  (hook) hook complete
           - `pass`  (test) test passed
           - `fail`  (test, err) test failed
           - `pending`  (test) test pending
      */

      var event, _i, _len, _ref, _results;
      _ref = ['start', 'end', 'suite', 'suite end', 'test', 'test end', 'hook', 'hook end', 'pass', 'fail', 'pending'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push((function(event) {
          return runner.on(event, function() {
            var data;
            data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return emitter.emit('spec_event', {
              source: 'mocha',
              event: event,
              data: data
            });
          });
        })(event));
      }
      return _results;
    }
  });
  return api = {
    run: function(files, callback) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        mocha.addFile(file);
      }
      return mocha.run(callback);
    }
  };
};
